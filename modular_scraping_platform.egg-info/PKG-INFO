Metadata-Version: 2.4
Name: modular-scraping-platform
Version: 1.0.0
Summary: A modular platform for web scraping with pluggable fetchers, parsers, and sinks
Author-email: Your Name <your.email@example.com>
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: pydantic>=2.0.0
Requires-Dist: aiohttp>=3.8.0
Requires-Dist: aiosqlite>=0.19.0
Requires-Dist: apscheduler>=3.10.0
Requires-Dist: pyyaml>=6.0
Requires-Dist: beautifulsoup4>=4.12.0
Requires-Dist: lxml>=4.9.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: openpyxl>=3.1.0
Requires-Dist: odfpy>=1.4.0
Provides-Extra: discord
Requires-Dist: discord.py>=2.3.0; extra == "discord"
Provides-Extra: telegram
Requires-Dist: python-telegram-bot>=20.0; extra == "telegram"
Provides-Extra: browser
Requires-Dist: playwright>=1.40.0; extra == "browser"
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.21.0; extra == "dev"
Requires-Dist: black>=23.0.0; extra == "dev"
Requires-Dist: isort>=5.12.0; extra == "dev"
Requires-Dist: mypy>=1.5.0; extra == "dev"

# Modular Scraper Platform

This is a complete rewrite of the financial data scraping system using a modular Fetcher→Parser→Sink architecture.

## Architecture

```
new_implementation/
│
├── core/                     # Re-usable framework – very stable
│   ├── models.py             # RawItem, ParsedItem, Event
│   ├── interfaces.py         # Fetcher, Parser, Sink abstract classes
│   ├── infra/
│   │   ├── http.py           # aiohttp wrapper with retry logic
│   │   ├── ws.py             # websocket client with heartbeat / reconnect
│   │   ├── sel.py            # Playwright helpers for browser automation
│   │   ├── db.py             # async SQLite wrapper with migrations
│   │   └── scheduler.py      # APScheduler wrapper
│   └── orchestrator.py       # pipeline management and orchestration
│
├── plugins/                  # Domain-specific implementations
│   └── fi_shortinterest/
│       ├── fetcher.py        # FiFetcher (ODS download + timestamp poll)
│       ├── parser.py         # FiAggParser / FiActParser
│       └── sinkmap.yaml      # default sink configuration
│
├── sinks/                    # Cross-cutting outputs
│   ├── discord_sink.py       # Discord notifications
│   ├── database_sink.py      # SQLite persistence
│   └── telegram_sink.py      # Telegram notifications
│
├── config.yaml               # declarative service configuration
├── main.py                   # standalone entry point
└── integration_bridge.py     # bridge for existing Discord bot
```

## Key Features

- **Modular Design**: Clean separation between fetching, parsing, and sinking
- **Async/Await**: Fully asynchronous with proper error handling
- **Database**: SQLite with automatic migrations and connection pooling
- **Retry Logic**: Robust HTTP client with exponential backoff
- **Diff Detection**: Only processes/notifies on actual changes
- **Type Safety**: Pydantic models throughout for validation
- **Extensible**: Easy to add new data sources and output channels

## Quick Start

### Standalone Usage

```bash
cd new_implementation
pip install -r requirements.txt
python main.py
```

### Integration with Existing Discord Bot

```python
from new_implementation.integration_bridge import start_fi_monitoring

# In your Discord bot setup
bridge = await start_fi_monitoring(
    discord_bot=bot,
    session=your_aiohttp_session,  # optional
    channel_id=1175019650963222599,
    error_channel_id=1162053416290361516,
)

# The system now runs continuously in the background
# No need for manual update calls
```

## Configuration

Edit `config.yaml` to customize:
- Database path
- Polling intervals
- Discord channels
- Tracked companies
- Logging levels

## Database Schema

The system automatically creates and migrates SQLite tables:

- `short_positions`: Aggregate short interest data
- `position_holders`: Individual position holder data
- `migrations`: Schema version tracking

## Adding New Data Sources

1. Create a new plugin directory under `plugins/`
2. Implement `Fetcher` and `Parser` classes
3. Add configuration to `config.yaml`
4. Register with the orchestrator

## Development

```bash
# Install development dependencies
pip install -r requirements.txt

# Run tests
pytest

# Format code
black .
isort .

# Type checking
mypy .
```

## Migration from Old System

The `integration_bridge.py` provides a drop-in replacement for the old `fi_blankning.py` module. Simply replace your existing import and initialization code.
